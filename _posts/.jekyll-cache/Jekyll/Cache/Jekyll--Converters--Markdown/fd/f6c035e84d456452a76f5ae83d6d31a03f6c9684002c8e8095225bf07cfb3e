I"A+<ul id="markdown-toc">
  <li><a href="#开发原因" id="markdown-toc-开发原因">开发原因</a></li>
  <li><a href="#开发组件" id="markdown-toc-开发组件">开发组件</a></li>
  <li><a href="#开发思路" id="markdown-toc-开发思路">开发思路</a></li>
  <li><a href="#实现细节" id="markdown-toc-实现细节">实现细节</a>    <ul>
      <li><a href="#注解" id="markdown-toc-注解">注解</a></li>
      <li><a href="#注解processor的实现" id="markdown-toc-注解processor的实现">注解Processor的实现</a></li>
      <li><a href="#配置文件" id="markdown-toc-配置文件">配置文件</a></li>
      <li><a href="#生成maven包" id="markdown-toc-生成maven包">生成Maven包</a></li>
      <li><a href="#测试" id="markdown-toc-测试">测试</a></li>
      <li><a href="#总结" id="markdown-toc-总结">总结</a></li>
    </ul>
  </li>
</ul>

<h2 id="开发原因">开发原因</h2>

<p>在使用Hibernate时候，经常会写这样的代码：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Override
public List getTemplateList(long id) {
    DetachedCriteria criteria = DetachedCriteria.forClass(Template.class);
    criteria.add(Restrictions.eq("id", id));
    criteria.addOrder(Order.desc("create_time"));
    return findByDetachedCriteria(criteria);
}
</code></pre></div></div>

<p>在设置条件的时候，不得不使用hibernate 实体类中对应的字段，这个时侯要么是跳到对应类或xml文件里复制粘贴，要么是自己手打，还容易出错。这个时侯就会想，如果能为实体类生成一些方法，以获取对应的实体类字段名，那就方便多了，达到如下这种效果：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Override
public List getTemplateList(long id) {
    DetachedCriteria criteria = DetachedCriteria.forClass(Template.class);
    criteria.add(Restrictions.eq(TemplateTool.getId(), id));
    criteria.addOrder(Order.desc(TemplateTool.getCreate_Time());
    return findByDetachedCriteria(criteria);
}
</code></pre></div></div>

<p>这样是不是方便了很多，在IDE的帮助下，能有效提高写代码的效率。</p>

<h2 id="开发组件">开发组件</h2>

<p>Intellij</p>

<h2 id="开发思路">开发思路</h2>

<p>根据开发原因，很容联想到一个开源工具<code class="language-plaintext highlighter-rouge">LomBok</code>，它能够自动生成<code class="language-plaintext highlighter-rouge">Getter/Setter</code>，<code class="language-plaintext highlighter-rouge">toString</code>，<code class="language-plaintext highlighter-rouge">hashCode</code>等方法，在intellij上配合lombok的插件，能够实时调出这些方法。于是我尝试在Lombok上去拓展，但发现Lombok并不能直接拓展，需要修改其源码并重新编译，这就没必要了。然后了解了一下Lombok的原理，是基于<code class="language-plaintext highlighter-rouge">Annotation Processing</code>来实现的，简单来说就是为<code class="language-plaintext highlighter-rouge">Annotation</code>注册一个<code class="language-plaintext highlighter-rouge">Processor</code>，在编译时动态生成代码，这算是实现工具的神器了。(这里当时认识有错误，Lombok实际是通过修改AST来实现的，并非<code class="language-plaintext highlighter-rouge">Annotation Processing</code> 2016－07－01)</p>

<p>于是我学习了一下这片文章 <a href="http://hannesdorfmann.com/annotation-processing/annotationprocessing101">Annotation Processing</a>，照着上面所诉的模式写了一个Hibernate工具。</p>

<h2 id="实现细节">实现细节</h2>

<p>源码参见：<a href="https://github.com/sadwxqezc/AP">Huang Huan Github Annotation Processing</a></p>

<h3 id="注解">注解</h3>

<p>首先需要定义一个作用于<code class="language-plaintext highlighter-rouge">source</code>阶段的注解：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@Documented
@Target(ElementType.TYPE)
@Retention(RetentionPolicy.SOURCE)
public @interface ORMTool {
}
</code></pre></div></div>

<h3 id="注解processor的实现">注解Processor的实现</h3>

<p>定义一个<code class="language-plaintext highlighter-rouge">ORMToolProcessor</code>来对应该注解：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@AutoService(Processor.class)
@SupportedAnnotationTypes("bj.huanghuan.annotation.ORMTool")
public class ORMToolProcessor extends AbstractProcessor {

    /**
     * 打印信息
     **/
    private Messager messager;

    /**
     * 创建文件工具
     **/
    private Filer filer;

    /**
     * element工具
     **/
    private Elements elementUtils;


    private static final String SUFFIX = "Tool";

    @Override
    public synchronized void init(ProcessingEnvironment processingEnv) {
        super.init(processingEnv);
        messager = processingEnv.getMessager();
        filer = processingEnv.getFiler();
        elementUtils = processingEnv.getElementUtils();
    }

    @Override
    public boolean process(Set&lt;? extends TypeElement&gt; annotations, 
    RoundEnvironment roundEnv) {
        for (Element element : roundEnv.getElementsAnnotatedWith(ORMTool.class)) {
            if (element.getKind() != ElementKind.CLASS) {
                printError(element, 
                "Only Classes can be annotated with @%s",
                 ORMTool.class.getSimpleName());
                return true;
            }
            TypeElement typeElement = (TypeElement) element;
            String className = typeElement.getSimpleName() + SUFFIX;
            try {
                JavaFileObject classFile = filer.createSourceFile(className);
                Writer writer = classFile.openWriter();
                JavaWriter javaWriter = new JavaWriter(writer);
                /*************** package Name *************/
                PackageElement packageElement = elementUtils.getPackageOf(typeElement);
                if (!packageElement.isUnnamed()) {
                    javaWriter.emitPackage(packageElement.getQualifiedName().toString());
                    javaWriter.emitEmptyLine();
                } else {
                    javaWriter.emitPackage("");
                }

                javaWriter.beginType(className, "class", EnumSet.of(Modifier.PUBLIC));
                javaWriter.emitEmptyLine();

                /************ generate getter for fields ************/
                List&lt;VariableElement&gt; insideElements =
                 ElementFilter.fieldsIn(typeElement.getEnclosedElements());
                for (VariableElement variableElement : insideElements) {
                    javaWriter.beginMethod("String",
                     variableElement.getSimpleName().toString(),
                     EnumSet.of(Modifier.PUBLIC, Modifier.STATIC),
                     null, null);
                    javaWriter.emitStatement("return \"" +
                     variableElement.getSimpleName().toString() + "\"");
                    javaWriter.endMethod();
                    javaWriter.emitEmptyLine();
                }

                javaWriter.endType();
                javaWriter.close();
            } catch (IOException e) {
                messager.printMessage(Diagnostic.Kind.ERROR, 
                "Gennerate Source Code Failed!");
            }
        }
        return false;
    }

    @Override
    public SourceVersion getSupportedSourceVersion() {
        return SourceVersion.latestSupported();
    }

    /**
     * 错误日志打印
     *
     * @param element
     * @param msg
     * @param args
     */
    private void printError(Element element, String msg, Object... args) {
        messager.printMessage(Diagnostic.Kind.ERROR, String.format(msg, args), element);
    }
}
</code></pre></div></div>

<p>这部门代码里有一些需要解释的地方：</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@AutoService</code>是Google提供的注册一个工具，其实作用应该是省去后面我将要讲的配置文件，不过影响不大。</li>
  <li><code class="language-plaintext highlighter-rouge">process(Set&lt;? extends TypeElement&gt; annotations, ...)</code>是处理的入口，首先判断被<code class="language-plaintext highlighter-rouge">ORMTool</code>注解的元素是不是<code class="language-plaintext highlighter-rouge">Class</code>类型，然后利用<code class="language-plaintext highlighter-rouge">JavaWriter</code>这个代码生成工具来构建新的Java文件，为注解的类生成一个对应的tool类。该类包含了被注解类中所有<code class="language-plaintext highlighter-rouge">Field</code>的参数名<code class="language-plaintext highlighter-rouge">Getter</code>。</li>
  <li>这里面的<code class="language-plaintext highlighter-rouge">TypeElement</code>，<code class="language-plaintext highlighter-rouge">VariableElement</code>分别指的类类型和域类型。</li>
</ul>

<h3 id="配置文件">配置文件</h3>

<p>这里需要一个配置文件，文件全路径是<code class="language-plaintext highlighter-rouge">/META-INF/services/javax.annotation.processing.Processor</code>，配置文件中写入<code class="language-plaintext highlighter-rouge">ORMToolProcessor</code>中的路径，如<code class="language-plaintext highlighter-rouge">bj.huanghuan.processor.ORMToolProcessor</code>。实际上又了上面的<code class="language-plaintext highlighter-rouge">@AutoService</code>其实应该不需要手写这个文件了，不过我没试过，读者有兴趣可以试试。</p>

<p>截图：</p>

<p><img src="/pics/ap-structure" alt="文件结构" /></p>

<h3 id="生成maven包">生成Maven包</h3>

<p>最后需要生成一个Maven包，加入到其它项目中供调用。</p>

<h3 id="测试">测试</h3>

<p>测试用的<code class="language-plaintext highlighter-rouge">Test</code>类：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>@ORMTool
public class Test {

	private int id;

	private String name;

	private Boolean isNew;
}
</code></pre></div></div>

<p>生成的<code class="language-plaintext highlighter-rouge">TestTool</code>类:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public class TestTool {
	public TestTool() {
	}

	public static String id() {
    	return "id";
	}

	public static String name() {
    	return "name";
	}

	public static String isNew() {
    	return "isNew";
	}
}
</code></pre></div></div>

<h3 id="总结">总结</h3>

<p>这种方式的工具需要在使用前编译一下代码，而且不能在原始代码上进行修改，也算是点小遗憾了。
PS: intellij上有个叫GeneratePropertyNameConstants的插件，用这个也可以，只不过麻烦些</p>
:ET