I"t<ul id="markdown-toc">
  <li><a href="#fileopen命令实现" id="markdown-toc-fileopen命令实现">fileopen命令实现</a></li>
  <li><a href="#todo命令实现" id="markdown-toc-todo命令实现">todo命令实现</a></li>
  <li><a href="#valid-phone-numbers" id="markdown-toc-valid-phone-numbers">Valid Phone Numbers</a></li>
  <li><a href="#transpose-file" id="markdown-toc-transpose-file">Transpose File</a></li>
  <li><a href="#word-frequency" id="markdown-toc-word-frequency">Word Frequency</a></li>
</ul>

<h2 id="fileopen命令实现">fileopen命令实现</h2>

<p>fileopen命令是为了实现Mac系统下，在终端中用应用打开文件。<br />
首先将目录<code class="language-plaintext highlighter-rouge">/Users/huanghuan/Work/MyCMD </code>命令加入环境变量中，Mac下可配置在<code class="language-plaintext highlighter-rouge">/etc/bashrc</code>中。然后创建<code class="language-plaintext highlighter-rouge">fileopen</code>文件，其内容为：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 1	#! /bin/sh
 2	if [ $# != 2 ]
 3	then
 4	    echo "输入参数错误!"
 5	else
 6	   search_result=`find /Applications -maxdepth 1  -name *${1}*.app | wc -l`
 7	   app_list=`find /Applications -maxdepth 1  -name *${1}*.app`
 8	   if (($search_result&lt;=0))
 9	   then
10	       echo "未找到对应程序"
11	   elif (($search_result==1))
12	   then
13	       echo "打开文件"
14	       open ${app_list} ${2}
15	   else
16	       echo "符合条件的程序有:\n${app_list}"
17	       echo "请重新输入正确的程序名"
18	   fi
19	fi
20	exit
</code></pre></div></div>

<p>命令的运行效果如下：</p>

<p><img src="/pics/fileopen.png" alt="fileopen命令" /></p>

<p>PS:该命令将进一步完善，目前作为一个Shell练习而简单实现</p>

<h2 id="todo命令实现">todo命令实现</h2>

<p>todo命令实际上就是实现了一个toDoList的小命令，配置如fileopen命令，其内容为：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 1	#! /bin/sh
 2
 3	path="/Users/huanghuan/Work/MyCMD/toDoList"
 4
 5	while getopts a:r: option
 6	do
 7	  case $option in
 8	       a)
 9	         echo ${OPTARG}" 创建时间:"`date +%Y年-%m月-%d日` &gt;&gt;$path
10	         ;;
11	       r)
12	         if [ -f "$path" ]
13	         then
14	             gsed -i "${OPTARG}d" $path
15	         fi
16	         ;;
17	       ?)
18	         echo "Usage: toDo [-arp] [arg]"
19	         echo "-a add todo item"
20	         echo "-r remove todo item"
21	         echo "-p print todo List"
22	         exit
23	         ;;
24	  esac
25	done
26
27	echo "当前待办项目:"
28	if [ -f "$path" ]
29	then
30	    cat -n $path
31	fi
32	exit
</code></pre></div></div>

<p>命令的运行效果如下：</p>

<p><img src="/pics/todo.png" alt="todo命令" /></p>

<p>该命令的扩展参见：<a href="https://github.com/sadwxqezc/todo_cmd">todo扩展</a></p>

<h2 id="valid-phone-numbers">Valid Phone Numbers</h2>

<p>来源于Leetcode题目：<a href="https://leetcode.com/problems/valid-phone-numbers/">Valid Phone Numbers</a></p>

<p>Given a text file file.txt that contains list of phone numbers (one per line), write a one liner bash script to print all valid phone numbers.</p>

<p>You may assume that a valid phone number must appear in one of the following two formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit)</p>

<p>You may also assume each line in the text file must not contain leading or trailing white spaces.</p>

<p>For example, assume that file.txt has the following content:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>987-123-4567
123 456 7890
(123) 456-7890
</code></pre></div></div>

<p>Your script should output the following valid phone numbers:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>987-123-4567
(123) 456-7890
</code></pre></div></div>

<p>脚本代码：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>grep -E '^([0-9]{3}-|\([0-9]{3}\) )[0-9]{3}-[0-9]{4}$' file.txt
</code></pre></div></div>

<p>使用<code class="language-plaintext highlighter-rouge">-E</code>可以少写很多转义字符，这道题还值得注意的是：<a href="https://leetcode.com/discuss/29452/whats-the-difference-between-d-and-0-9-in-grep">what’s the difference between \d and [0-9] in grep</a></p>

<h2 id="transpose-file">Transpose File</h2>

<p>来源于Leetcode题目：<a href="https://leetcode.com/problems/transpose-file/">Transpose File</a></p>

<p>Given a text file file.txt, transpose its content.</p>

<p>You may assume that each row has the same number of columns and each field is separated by the ‘ ‘ character.</p>

<p>For example, if file.txt has the following content:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>name age
alice 21
ryan 30
</code></pre></div></div>

<p>Output the following:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>name alice ryan
age 21 30
</code></pre></div></div>

<p>脚本代码：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>awk -F ' ' 'BEGIN{line=0;column=1} {while(column&lt;=NF){array[line,column]=$column; column++;} line++;column=1;} END{for(i=1;i&lt;=NF;i++){for(j=0;j&lt;line;j++){printf("%s",array[j,i]);if(j&lt;line-1){printf(" ")}} printf("\n");}}' file.txt
</code></pre></div></div>

<h2 id="word-frequency">Word Frequency</h2>

<p>来源于Leetcode题目：<a href="https://leetcode.com/problems/word-frequency/">Word Frequency</a></p>

<p>Write a bash script to calculate the frequency of each word in a text file words.txt.</p>

<p>For simplicity sake, you may assume:</p>

<p>words.txt contains only lowercase characters and space ‘ ‘ characters.
Each word must consist of lowercase characters only.
Words are separated by one or more whitespace characters.
For example, assume that words.txt has the following content:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>the day is sunny the the
the sunny is is
</code></pre></div></div>

<p>Your script should output the following, sorted by descending frequency:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>the 4
is 3
sunny 2
day 1
</code></pre></div></div>

<p>Note:
Don’t worry about handling ties, it is guaranteed that each word’s frequency count is unique.</p>

<p>脚本代码：</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sed 's/ /\n/g' words.txt | sed '/^$/d' | sort | uniq -c | sort -nr | awk -F ' ' '{print $2" "$1}'
</code></pre></div></div>
:ET